/*
* Generated by XIV.Core.Utils.ClassGenerator
*/
using UnityEngine;

public static class ShaderConstants
{
	// Inner Classes
	public static class ShaderGraphs_GhostLit
	{
		// Members
		public const string Texture2D_61ff577471574ea7b1ed02152eb4b594_Texture = "Texture2D_61ff577471574ea7b1ed02152eb4b594";
		public static readonly int Texture2D_61ff577471574ea7b1ed02152eb4b594_TextureID = Shader.PropertyToID("Texture2D_61ff577471574ea7b1ed02152eb4b594");
		public const string Color_f41ea9d6cc7943488a4bce7ca13f02e9_Color = "Color_f41ea9d6cc7943488a4bce7ca13f02e9";
		public static readonly int Color_f41ea9d6cc7943488a4bce7ca13f02e9_ColorID = Shader.PropertyToID("Color_f41ea9d6cc7943488a4bce7ca13f02e9");
		public const string Texture2D_734b20f573414aa59e5fb2f2ab85363b_Texture = "Texture2D_734b20f573414aa59e5fb2f2ab85363b";
		public static readonly int Texture2D_734b20f573414aa59e5fb2f2ab85363b_TextureID = Shader.PropertyToID("Texture2D_734b20f573414aa59e5fb2f2ab85363b");
		public const string Normal_Strength_Float = "_Normal_Strength";
		public static readonly int Normal_Strength_FloatID = Shader.PropertyToID("_Normal_Strength");
		public const string Texture2D_9f2645676b6144acb8a6e5a21ad65398_Texture = "Texture2D_9f2645676b6144acb8a6e5a21ad65398";
		public static readonly int Texture2D_9f2645676b6144acb8a6e5a21ad65398_TextureID = Shader.PropertyToID("Texture2D_9f2645676b6144acb8a6e5a21ad65398");
		public const string Texture2D_286825c82f934379b3394f5c6575023e_Texture = "Texture2D_286825c82f934379b3394f5c6575023e";
		public static readonly int Texture2D_286825c82f934379b3394f5c6575023e_TextureID = Shader.PropertyToID("Texture2D_286825c82f934379b3394f5c6575023e");
		public const string Vector1_3064bd55a9174bb3a324450c5dbad75a_Float = "Vector1_3064bd55a9174bb3a324450c5dbad75a";
		public static readonly int Vector1_3064bd55a9174bb3a324450c5dbad75a_FloatID = Shader.PropertyToID("Vector1_3064bd55a9174bb3a324450c5dbad75a");
		public const string Color_e649d97becec41be883dd5b6d677c0cc_Color = "Color_e649d97becec41be883dd5b6d677c0cc";
		public static readonly int Color_e649d97becec41be883dd5b6d677c0cc_ColorID = Shader.PropertyToID("Color_e649d97becec41be883dd5b6d677c0cc");
		public const string Color_39594e77c71d4eb48afcf997cda76117_Color = "Color_39594e77c71d4eb48afcf997cda76117";
		public static readonly int Color_39594e77c71d4eb48afcf997cda76117_ColorID = Shader.PropertyToID("Color_39594e77c71d4eb48afcf997cda76117");
		public const string GHOST_FALLOFF_TIME_Float = "GHOST_FALLOFF_TIME";
		public static readonly int GHOST_FALLOFF_TIME_FloatID = Shader.PropertyToID("GHOST_FALLOFF_TIME");
		public const string Vector1_2765f3234f134173bb662e3352e5b05d_Float = "Vector1_2765f3234f134173bb662e3352e5b05d";
		public static readonly int Vector1_2765f3234f134173bb662e3352e5b05d_FloatID = Shader.PropertyToID("Vector1_2765f3234f134173bb662e3352e5b05d");
		public const string GHOST_NOISE_Float = "GHOST_NOISE";
		public static readonly int GHOST_NOISE_FloatID = Shader.PropertyToID("GHOST_NOISE");
		public const string Noise_Scale_Float = "_Noise_Scale";
		public static readonly int Noise_Scale_FloatID = Shader.PropertyToID("_Noise_Scale");
		public const string Vector1_283f9ebbab87471cad81e071d411304f_Float = "Vector1_283f9ebbab87471cad81e071d411304f";
		public static readonly int Vector1_283f9ebbab87471cad81e071d411304f_FloatID = Shader.PropertyToID("Vector1_283f9ebbab87471cad81e071d411304f");
		public const string NOISE_MODE_Float = "_NOISE_MODE";
		public static readonly int NOISE_MODE_FloatID = Shader.PropertyToID("_NOISE_MODE");
		public const string Alpha_Range = "_Alpha";
		public static readonly int Alpha_RangeID = Shader.PropertyToID("_Alpha");
		public const string QueueOffset_Float = "_QueueOffset";
		public static readonly int QueueOffset_FloatID = Shader.PropertyToID("_QueueOffset");
		public const string QueueControl_Float = "_QueueControl";
		public static readonly int QueueControl_FloatID = Shader.PropertyToID("_QueueControl");
		public const string unity_Lightmaps_Texture = "unity_Lightmaps";
		public static readonly int unity_Lightmaps_TextureID = Shader.PropertyToID("unity_Lightmaps");
		public const string unity_LightmapsInd_Texture = "unity_LightmapsInd";
		public static readonly int unity_LightmapsInd_TextureID = Shader.PropertyToID("unity_LightmapsInd");
		public const string unity_ShadowMasks_Texture = "unity_ShadowMasks";
		public static readonly int unity_ShadowMasks_TextureID = Shader.PropertyToID("unity_ShadowMasks");
		
	} // class ShaderGraphs_GhostLit
	
	public static class ShaderGraphs_GhostUnlit
	{
		// Members
		public const string Texture2D_705fbe96631c471c9c0f9c4dcbf99b88_Texture = "Texture2D_705fbe96631c471c9c0f9c4dcbf99b88";
		public static readonly int Texture2D_705fbe96631c471c9c0f9c4dcbf99b88_TextureID = Shader.PropertyToID("Texture2D_705fbe96631c471c9c0f9c4dcbf99b88");
		public const string Color_189c87cfc000415fa275c99c01aae40d_Color = "Color_189c87cfc000415fa275c99c01aae40d";
		public static readonly int Color_189c87cfc000415fa275c99c01aae40d_ColorID = Shader.PropertyToID("Color_189c87cfc000415fa275c99c01aae40d");
		public const string Texture2D_546492ceffac46ad853d427a2d8e937b_Texture = "Texture2D_546492ceffac46ad853d427a2d8e937b";
		public static readonly int Texture2D_546492ceffac46ad853d427a2d8e937b_TextureID = Shader.PropertyToID("Texture2D_546492ceffac46ad853d427a2d8e937b");
		public const string Normal_Strength_Float = "_Normal_Strength";
		public static readonly int Normal_Strength_FloatID = Shader.PropertyToID("_Normal_Strength");
		public const string Vector1_c0fe64c24a1f42749d95863d7b3afd32_Float = "Vector1_c0fe64c24a1f42749d95863d7b3afd32";
		public static readonly int Vector1_c0fe64c24a1f42749d95863d7b3afd32_FloatID = Shader.PropertyToID("Vector1_c0fe64c24a1f42749d95863d7b3afd32");
		public const string Color_a293635786174851915c48f95460e9e7_Color = "Color_a293635786174851915c48f95460e9e7";
		public static readonly int Color_a293635786174851915c48f95460e9e7_ColorID = Shader.PropertyToID("Color_a293635786174851915c48f95460e9e7");
		public const string Color_f3edd8bee3f9499c8ea7b8627e5d7164_Color = "Color_f3edd8bee3f9499c8ea7b8627e5d7164";
		public static readonly int Color_f3edd8bee3f9499c8ea7b8627e5d7164_ColorID = Shader.PropertyToID("Color_f3edd8bee3f9499c8ea7b8627e5d7164");
		public const string GHOST_FALLOFF_TIME_Float = "GHOST_FALLOFF_TIME";
		public static readonly int GHOST_FALLOFF_TIME_FloatID = Shader.PropertyToID("GHOST_FALLOFF_TIME");
		public const string Vector1_41a87df37a22443aab5d022f9718407a_Float = "Vector1_41a87df37a22443aab5d022f9718407a";
		public static readonly int Vector1_41a87df37a22443aab5d022f9718407a_FloatID = Shader.PropertyToID("Vector1_41a87df37a22443aab5d022f9718407a");
		public const string GHOST_NOISE_Float = "GHOST_NOISE";
		public static readonly int GHOST_NOISE_FloatID = Shader.PropertyToID("GHOST_NOISE");
		public const string Noise_Scale_Float = "_Noise_Scale";
		public static readonly int Noise_Scale_FloatID = Shader.PropertyToID("_Noise_Scale");
		public const string Vector1_8b4c9aff004b4f3bb8d7fde1a788f18f_Float = "Vector1_8b4c9aff004b4f3bb8d7fde1a788f18f";
		public static readonly int Vector1_8b4c9aff004b4f3bb8d7fde1a788f18f_FloatID = Shader.PropertyToID("Vector1_8b4c9aff004b4f3bb8d7fde1a788f18f");
		public const string NOISE_MODE_Float = "_NOISE_MODE";
		public static readonly int NOISE_MODE_FloatID = Shader.PropertyToID("_NOISE_MODE");
		public const string QueueOffset_Float = "_QueueOffset";
		public static readonly int QueueOffset_FloatID = Shader.PropertyToID("_QueueOffset");
		public const string QueueControl_Float = "_QueueControl";
		public static readonly int QueueControl_FloatID = Shader.PropertyToID("_QueueControl");
		public const string unity_Lightmaps_Texture = "unity_Lightmaps";
		public static readonly int unity_Lightmaps_TextureID = Shader.PropertyToID("unity_Lightmaps");
		public const string unity_LightmapsInd_Texture = "unity_LightmapsInd";
		public static readonly int unity_LightmapsInd_TextureID = Shader.PropertyToID("unity_LightmapsInd");
		public const string unity_ShadowMasks_Texture = "unity_ShadowMasks";
		public static readonly int unity_ShadowMasks_TextureID = Shader.PropertyToID("unity_ShadowMasks");
		
	} // class ShaderGraphs_GhostUnlit
	
	public static class ShaderGraphs_HitIndicatorShader
	{
		// Members
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string QueueOffset_Float = "_QueueOffset";
		public static readonly int QueueOffset_FloatID = Shader.PropertyToID("_QueueOffset");
		public const string QueueControl_Float = "_QueueControl";
		public static readonly int QueueControl_FloatID = Shader.PropertyToID("_QueueControl");
		public const string unity_Lightmaps_Texture = "unity_Lightmaps";
		public static readonly int unity_Lightmaps_TextureID = Shader.PropertyToID("unity_Lightmaps");
		public const string unity_LightmapsInd_Texture = "unity_LightmapsInd";
		public static readonly int unity_LightmapsInd_TextureID = Shader.PropertyToID("unity_LightmapsInd");
		public const string unity_ShadowMasks_Texture = "unity_ShadowMasks";
		public static readonly int unity_ShadowMasks_TextureID = Shader.PropertyToID("unity_ShadowMasks");
		
	} // class ShaderGraphs_HitIndicatorShader
	
	public static class TextMeshPro_BitmapCustomAtlas
	{
		// Members
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string FaceTex_Texture = "_FaceTex";
		public static readonly int FaceTex_TextureID = Shader.PropertyToID("_FaceTex");
		public const string FaceColor_Color = "_FaceColor";
		public static readonly int FaceColor_ColorID = Shader.PropertyToID("_FaceColor");
		public const string VertexOffsetX_Float = "_VertexOffsetX";
		public static readonly int VertexOffsetX_FloatID = Shader.PropertyToID("_VertexOffsetX");
		public const string VertexOffsetY_Float = "_VertexOffsetY";
		public static readonly int VertexOffsetY_FloatID = Shader.PropertyToID("_VertexOffsetY");
		public const string MaskSoftnessX_Float = "_MaskSoftnessX";
		public static readonly int MaskSoftnessX_FloatID = Shader.PropertyToID("_MaskSoftnessX");
		public const string MaskSoftnessY_Float = "_MaskSoftnessY";
		public static readonly int MaskSoftnessY_FloatID = Shader.PropertyToID("_MaskSoftnessY");
		public const string ClipRect_Vector = "_ClipRect";
		public static readonly int ClipRect_VectorID = Shader.PropertyToID("_ClipRect");
		public const string Padding_Float = "_Padding";
		public static readonly int Padding_FloatID = Shader.PropertyToID("_Padding");
		public const string StencilComp_Float = "_StencilComp";
		public static readonly int StencilComp_FloatID = Shader.PropertyToID("_StencilComp");
		public const string Stencil_Float = "_Stencil";
		public static readonly int Stencil_FloatID = Shader.PropertyToID("_Stencil");
		public const string StencilOp_Float = "_StencilOp";
		public static readonly int StencilOp_FloatID = Shader.PropertyToID("_StencilOp");
		public const string StencilWriteMask_Float = "_StencilWriteMask";
		public static readonly int StencilWriteMask_FloatID = Shader.PropertyToID("_StencilWriteMask");
		public const string StencilReadMask_Float = "_StencilReadMask";
		public static readonly int StencilReadMask_FloatID = Shader.PropertyToID("_StencilReadMask");
		public const string CullMode_Float = "_CullMode";
		public static readonly int CullMode_FloatID = Shader.PropertyToID("_CullMode");
		public const string ColorMask_Float = "_ColorMask";
		public static readonly int ColorMask_FloatID = Shader.PropertyToID("_ColorMask");
		
	} // class TextMeshPro_BitmapCustomAtlas
	
	public static class TextMeshPro_Mobile_Bitmap
	{
		// Members
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string Color_Color = "_Color";
		public static readonly int Color_ColorID = Shader.PropertyToID("_Color");
		public const string DiffusePower_Range = "_DiffusePower";
		public static readonly int DiffusePower_RangeID = Shader.PropertyToID("_DiffusePower");
		public const string VertexOffsetX_Float = "_VertexOffsetX";
		public static readonly int VertexOffsetX_FloatID = Shader.PropertyToID("_VertexOffsetX");
		public const string VertexOffsetY_Float = "_VertexOffsetY";
		public static readonly int VertexOffsetY_FloatID = Shader.PropertyToID("_VertexOffsetY");
		public const string MaskSoftnessX_Float = "_MaskSoftnessX";
		public static readonly int MaskSoftnessX_FloatID = Shader.PropertyToID("_MaskSoftnessX");
		public const string MaskSoftnessY_Float = "_MaskSoftnessY";
		public static readonly int MaskSoftnessY_FloatID = Shader.PropertyToID("_MaskSoftnessY");
		public const string ClipRect_Vector = "_ClipRect";
		public static readonly int ClipRect_VectorID = Shader.PropertyToID("_ClipRect");
		public const string StencilComp_Float = "_StencilComp";
		public static readonly int StencilComp_FloatID = Shader.PropertyToID("_StencilComp");
		public const string Stencil_Float = "_Stencil";
		public static readonly int Stencil_FloatID = Shader.PropertyToID("_Stencil");
		public const string StencilOp_Float = "_StencilOp";
		public static readonly int StencilOp_FloatID = Shader.PropertyToID("_StencilOp");
		public const string StencilWriteMask_Float = "_StencilWriteMask";
		public static readonly int StencilWriteMask_FloatID = Shader.PropertyToID("_StencilWriteMask");
		public const string StencilReadMask_Float = "_StencilReadMask";
		public static readonly int StencilReadMask_FloatID = Shader.PropertyToID("_StencilReadMask");
		public const string CullMode_Float = "_CullMode";
		public static readonly int CullMode_FloatID = Shader.PropertyToID("_CullMode");
		public const string ColorMask_Float = "_ColorMask";
		public static readonly int ColorMask_FloatID = Shader.PropertyToID("_ColorMask");
		
	} // class TextMeshPro_Mobile_Bitmap
	
	public static class TextMeshPro_Bitmap
	{
		// Members
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string FaceTex_Texture = "_FaceTex";
		public static readonly int FaceTex_TextureID = Shader.PropertyToID("_FaceTex");
		public const string FaceColor_Color = "_FaceColor";
		public static readonly int FaceColor_ColorID = Shader.PropertyToID("_FaceColor");
		public const string VertexOffsetX_Float = "_VertexOffsetX";
		public static readonly int VertexOffsetX_FloatID = Shader.PropertyToID("_VertexOffsetX");
		public const string VertexOffsetY_Float = "_VertexOffsetY";
		public static readonly int VertexOffsetY_FloatID = Shader.PropertyToID("_VertexOffsetY");
		public const string MaskSoftnessX_Float = "_MaskSoftnessX";
		public static readonly int MaskSoftnessX_FloatID = Shader.PropertyToID("_MaskSoftnessX");
		public const string MaskSoftnessY_Float = "_MaskSoftnessY";
		public static readonly int MaskSoftnessY_FloatID = Shader.PropertyToID("_MaskSoftnessY");
		public const string ClipRect_Vector = "_ClipRect";
		public static readonly int ClipRect_VectorID = Shader.PropertyToID("_ClipRect");
		public const string StencilComp_Float = "_StencilComp";
		public static readonly int StencilComp_FloatID = Shader.PropertyToID("_StencilComp");
		public const string Stencil_Float = "_Stencil";
		public static readonly int Stencil_FloatID = Shader.PropertyToID("_Stencil");
		public const string StencilOp_Float = "_StencilOp";
		public static readonly int StencilOp_FloatID = Shader.PropertyToID("_StencilOp");
		public const string StencilWriteMask_Float = "_StencilWriteMask";
		public static readonly int StencilWriteMask_FloatID = Shader.PropertyToID("_StencilWriteMask");
		public const string StencilReadMask_Float = "_StencilReadMask";
		public static readonly int StencilReadMask_FloatID = Shader.PropertyToID("_StencilReadMask");
		public const string CullMode_Float = "_CullMode";
		public static readonly int CullMode_FloatID = Shader.PropertyToID("_CullMode");
		public const string ColorMask_Float = "_ColorMask";
		public static readonly int ColorMask_FloatID = Shader.PropertyToID("_ColorMask");
		
	} // class TextMeshPro_Bitmap
	
	public static class TextMeshPro_DistanceFieldOverlay
	{
		// Members
		public const string FaceTex_Texture = "_FaceTex";
		public static readonly int FaceTex_TextureID = Shader.PropertyToID("_FaceTex");
		public const string FaceUVSpeedX_Range = "_FaceUVSpeedX";
		public static readonly int FaceUVSpeedX_RangeID = Shader.PropertyToID("_FaceUVSpeedX");
		public const string FaceUVSpeedY_Range = "_FaceUVSpeedY";
		public static readonly int FaceUVSpeedY_RangeID = Shader.PropertyToID("_FaceUVSpeedY");
		public const string FaceColor_Color = "_FaceColor";
		public static readonly int FaceColor_ColorID = Shader.PropertyToID("_FaceColor");
		public const string FaceDilate_Range = "_FaceDilate";
		public static readonly int FaceDilate_RangeID = Shader.PropertyToID("_FaceDilate");
		public const string OutlineColor_Color = "_OutlineColor";
		public static readonly int OutlineColor_ColorID = Shader.PropertyToID("_OutlineColor");
		public const string OutlineTex_Texture = "_OutlineTex";
		public static readonly int OutlineTex_TextureID = Shader.PropertyToID("_OutlineTex");
		public const string OutlineUVSpeedX_Range = "_OutlineUVSpeedX";
		public static readonly int OutlineUVSpeedX_RangeID = Shader.PropertyToID("_OutlineUVSpeedX");
		public const string OutlineUVSpeedY_Range = "_OutlineUVSpeedY";
		public static readonly int OutlineUVSpeedY_RangeID = Shader.PropertyToID("_OutlineUVSpeedY");
		public const string OutlineWidth_Range = "_OutlineWidth";
		public static readonly int OutlineWidth_RangeID = Shader.PropertyToID("_OutlineWidth");
		public const string OutlineSoftness_Range = "_OutlineSoftness";
		public static readonly int OutlineSoftness_RangeID = Shader.PropertyToID("_OutlineSoftness");
		public const string Bevel_Range = "_Bevel";
		public static readonly int Bevel_RangeID = Shader.PropertyToID("_Bevel");
		public const string BevelOffset_Range = "_BevelOffset";
		public static readonly int BevelOffset_RangeID = Shader.PropertyToID("_BevelOffset");
		public const string BevelWidth_Range = "_BevelWidth";
		public static readonly int BevelWidth_RangeID = Shader.PropertyToID("_BevelWidth");
		public const string BevelClamp_Range = "_BevelClamp";
		public static readonly int BevelClamp_RangeID = Shader.PropertyToID("_BevelClamp");
		public const string BevelRoundness_Range = "_BevelRoundness";
		public static readonly int BevelRoundness_RangeID = Shader.PropertyToID("_BevelRoundness");
		public const string LightAngle_Range = "_LightAngle";
		public static readonly int LightAngle_RangeID = Shader.PropertyToID("_LightAngle");
		public const string SpecularColor_Color = "_SpecularColor";
		public static readonly int SpecularColor_ColorID = Shader.PropertyToID("_SpecularColor");
		public const string SpecularPower_Range = "_SpecularPower";
		public static readonly int SpecularPower_RangeID = Shader.PropertyToID("_SpecularPower");
		public const string Reflectivity_Range = "_Reflectivity";
		public static readonly int Reflectivity_RangeID = Shader.PropertyToID("_Reflectivity");
		public const string Diffuse_Range = "_Diffuse";
		public static readonly int Diffuse_RangeID = Shader.PropertyToID("_Diffuse");
		public const string Ambient_Range = "_Ambient";
		public static readonly int Ambient_RangeID = Shader.PropertyToID("_Ambient");
		public const string BumpMap_Texture = "_BumpMap";
		public static readonly int BumpMap_TextureID = Shader.PropertyToID("_BumpMap");
		public const string BumpOutline_Range = "_BumpOutline";
		public static readonly int BumpOutline_RangeID = Shader.PropertyToID("_BumpOutline");
		public const string BumpFace_Range = "_BumpFace";
		public static readonly int BumpFace_RangeID = Shader.PropertyToID("_BumpFace");
		public const string ReflectFaceColor_Color = "_ReflectFaceColor";
		public static readonly int ReflectFaceColor_ColorID = Shader.PropertyToID("_ReflectFaceColor");
		public const string ReflectOutlineColor_Color = "_ReflectOutlineColor";
		public static readonly int ReflectOutlineColor_ColorID = Shader.PropertyToID("_ReflectOutlineColor");
		public const string Cube_Texture = "_Cube";
		public static readonly int Cube_TextureID = Shader.PropertyToID("_Cube");
		public const string EnvMatrixRotation_Vector = "_EnvMatrixRotation";
		public static readonly int EnvMatrixRotation_VectorID = Shader.PropertyToID("_EnvMatrixRotation");
		public const string UnderlayColor_Color = "_UnderlayColor";
		public static readonly int UnderlayColor_ColorID = Shader.PropertyToID("_UnderlayColor");
		public const string UnderlayOffsetX_Range = "_UnderlayOffsetX";
		public static readonly int UnderlayOffsetX_RangeID = Shader.PropertyToID("_UnderlayOffsetX");
		public const string UnderlayOffsetY_Range = "_UnderlayOffsetY";
		public static readonly int UnderlayOffsetY_RangeID = Shader.PropertyToID("_UnderlayOffsetY");
		public const string UnderlayDilate_Range = "_UnderlayDilate";
		public static readonly int UnderlayDilate_RangeID = Shader.PropertyToID("_UnderlayDilate");
		public const string UnderlaySoftness_Range = "_UnderlaySoftness";
		public static readonly int UnderlaySoftness_RangeID = Shader.PropertyToID("_UnderlaySoftness");
		public const string GlowColor_Color = "_GlowColor";
		public static readonly int GlowColor_ColorID = Shader.PropertyToID("_GlowColor");
		public const string GlowOffset_Range = "_GlowOffset";
		public static readonly int GlowOffset_RangeID = Shader.PropertyToID("_GlowOffset");
		public const string GlowInner_Range = "_GlowInner";
		public static readonly int GlowInner_RangeID = Shader.PropertyToID("_GlowInner");
		public const string GlowOuter_Range = "_GlowOuter";
		public static readonly int GlowOuter_RangeID = Shader.PropertyToID("_GlowOuter");
		public const string GlowPower_Range = "_GlowPower";
		public static readonly int GlowPower_RangeID = Shader.PropertyToID("_GlowPower");
		public const string WeightNormal_Float = "_WeightNormal";
		public static readonly int WeightNormal_FloatID = Shader.PropertyToID("_WeightNormal");
		public const string WeightBold_Float = "_WeightBold";
		public static readonly int WeightBold_FloatID = Shader.PropertyToID("_WeightBold");
		public const string ShaderFlags_Float = "_ShaderFlags";
		public static readonly int ShaderFlags_FloatID = Shader.PropertyToID("_ShaderFlags");
		public const string ScaleRatioA_Float = "_ScaleRatioA";
		public static readonly int ScaleRatioA_FloatID = Shader.PropertyToID("_ScaleRatioA");
		public const string ScaleRatioB_Float = "_ScaleRatioB";
		public static readonly int ScaleRatioB_FloatID = Shader.PropertyToID("_ScaleRatioB");
		public const string ScaleRatioC_Float = "_ScaleRatioC";
		public static readonly int ScaleRatioC_FloatID = Shader.PropertyToID("_ScaleRatioC");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string TextureWidth_Float = "_TextureWidth";
		public static readonly int TextureWidth_FloatID = Shader.PropertyToID("_TextureWidth");
		public const string TextureHeight_Float = "_TextureHeight";
		public static readonly int TextureHeight_FloatID = Shader.PropertyToID("_TextureHeight");
		public const string GradientScale_Float = "_GradientScale";
		public static readonly int GradientScale_FloatID = Shader.PropertyToID("_GradientScale");
		public const string ScaleX_Float = "_ScaleX";
		public static readonly int ScaleX_FloatID = Shader.PropertyToID("_ScaleX");
		public const string ScaleY_Float = "_ScaleY";
		public static readonly int ScaleY_FloatID = Shader.PropertyToID("_ScaleY");
		public const string PerspectiveFilter_Range = "_PerspectiveFilter";
		public static readonly int PerspectiveFilter_RangeID = Shader.PropertyToID("_PerspectiveFilter");
		public const string Sharpness_Range = "_Sharpness";
		public static readonly int Sharpness_RangeID = Shader.PropertyToID("_Sharpness");
		public const string VertexOffsetX_Float = "_VertexOffsetX";
		public static readonly int VertexOffsetX_FloatID = Shader.PropertyToID("_VertexOffsetX");
		public const string VertexOffsetY_Float = "_VertexOffsetY";
		public static readonly int VertexOffsetY_FloatID = Shader.PropertyToID("_VertexOffsetY");
		public const string MaskCoord_Vector = "_MaskCoord";
		public static readonly int MaskCoord_VectorID = Shader.PropertyToID("_MaskCoord");
		public const string ClipRect_Vector = "_ClipRect";
		public static readonly int ClipRect_VectorID = Shader.PropertyToID("_ClipRect");
		public const string MaskSoftnessX_Float = "_MaskSoftnessX";
		public static readonly int MaskSoftnessX_FloatID = Shader.PropertyToID("_MaskSoftnessX");
		public const string MaskSoftnessY_Float = "_MaskSoftnessY";
		public static readonly int MaskSoftnessY_FloatID = Shader.PropertyToID("_MaskSoftnessY");
		public const string StencilComp_Float = "_StencilComp";
		public static readonly int StencilComp_FloatID = Shader.PropertyToID("_StencilComp");
		public const string Stencil_Float = "_Stencil";
		public static readonly int Stencil_FloatID = Shader.PropertyToID("_Stencil");
		public const string StencilOp_Float = "_StencilOp";
		public static readonly int StencilOp_FloatID = Shader.PropertyToID("_StencilOp");
		public const string StencilWriteMask_Float = "_StencilWriteMask";
		public static readonly int StencilWriteMask_FloatID = Shader.PropertyToID("_StencilWriteMask");
		public const string StencilReadMask_Float = "_StencilReadMask";
		public static readonly int StencilReadMask_FloatID = Shader.PropertyToID("_StencilReadMask");
		public const string CullMode_Float = "_CullMode";
		public static readonly int CullMode_FloatID = Shader.PropertyToID("_CullMode");
		public const string ColorMask_Float = "_ColorMask";
		public static readonly int ColorMask_FloatID = Shader.PropertyToID("_ColorMask");
		
	} // class TextMeshPro_DistanceFieldOverlay
	
	public static class TextMeshPro_DistanceFieldSSD
	{
		// Members
		public const string FaceTex_Texture = "_FaceTex";
		public static readonly int FaceTex_TextureID = Shader.PropertyToID("_FaceTex");
		public const string FaceUVSpeedX_Range = "_FaceUVSpeedX";
		public static readonly int FaceUVSpeedX_RangeID = Shader.PropertyToID("_FaceUVSpeedX");
		public const string FaceUVSpeedY_Range = "_FaceUVSpeedY";
		public static readonly int FaceUVSpeedY_RangeID = Shader.PropertyToID("_FaceUVSpeedY");
		public const string FaceColor_Color = "_FaceColor";
		public static readonly int FaceColor_ColorID = Shader.PropertyToID("_FaceColor");
		public const string FaceDilate_Range = "_FaceDilate";
		public static readonly int FaceDilate_RangeID = Shader.PropertyToID("_FaceDilate");
		public const string OutlineColor_Color = "_OutlineColor";
		public static readonly int OutlineColor_ColorID = Shader.PropertyToID("_OutlineColor");
		public const string OutlineTex_Texture = "_OutlineTex";
		public static readonly int OutlineTex_TextureID = Shader.PropertyToID("_OutlineTex");
		public const string OutlineUVSpeedX_Range = "_OutlineUVSpeedX";
		public static readonly int OutlineUVSpeedX_RangeID = Shader.PropertyToID("_OutlineUVSpeedX");
		public const string OutlineUVSpeedY_Range = "_OutlineUVSpeedY";
		public static readonly int OutlineUVSpeedY_RangeID = Shader.PropertyToID("_OutlineUVSpeedY");
		public const string OutlineWidth_Range = "_OutlineWidth";
		public static readonly int OutlineWidth_RangeID = Shader.PropertyToID("_OutlineWidth");
		public const string OutlineSoftness_Range = "_OutlineSoftness";
		public static readonly int OutlineSoftness_RangeID = Shader.PropertyToID("_OutlineSoftness");
		public const string Bevel_Range = "_Bevel";
		public static readonly int Bevel_RangeID = Shader.PropertyToID("_Bevel");
		public const string BevelOffset_Range = "_BevelOffset";
		public static readonly int BevelOffset_RangeID = Shader.PropertyToID("_BevelOffset");
		public const string BevelWidth_Range = "_BevelWidth";
		public static readonly int BevelWidth_RangeID = Shader.PropertyToID("_BevelWidth");
		public const string BevelClamp_Range = "_BevelClamp";
		public static readonly int BevelClamp_RangeID = Shader.PropertyToID("_BevelClamp");
		public const string BevelRoundness_Range = "_BevelRoundness";
		public static readonly int BevelRoundness_RangeID = Shader.PropertyToID("_BevelRoundness");
		public const string LightAngle_Range = "_LightAngle";
		public static readonly int LightAngle_RangeID = Shader.PropertyToID("_LightAngle");
		public const string SpecularColor_Color = "_SpecularColor";
		public static readonly int SpecularColor_ColorID = Shader.PropertyToID("_SpecularColor");
		public const string SpecularPower_Range = "_SpecularPower";
		public static readonly int SpecularPower_RangeID = Shader.PropertyToID("_SpecularPower");
		public const string Reflectivity_Range = "_Reflectivity";
		public static readonly int Reflectivity_RangeID = Shader.PropertyToID("_Reflectivity");
		public const string Diffuse_Range = "_Diffuse";
		public static readonly int Diffuse_RangeID = Shader.PropertyToID("_Diffuse");
		public const string Ambient_Range = "_Ambient";
		public static readonly int Ambient_RangeID = Shader.PropertyToID("_Ambient");
		public const string BumpMap_Texture = "_BumpMap";
		public static readonly int BumpMap_TextureID = Shader.PropertyToID("_BumpMap");
		public const string BumpOutline_Range = "_BumpOutline";
		public static readonly int BumpOutline_RangeID = Shader.PropertyToID("_BumpOutline");
		public const string BumpFace_Range = "_BumpFace";
		public static readonly int BumpFace_RangeID = Shader.PropertyToID("_BumpFace");
		public const string ReflectFaceColor_Color = "_ReflectFaceColor";
		public static readonly int ReflectFaceColor_ColorID = Shader.PropertyToID("_ReflectFaceColor");
		public const string ReflectOutlineColor_Color = "_ReflectOutlineColor";
		public static readonly int ReflectOutlineColor_ColorID = Shader.PropertyToID("_ReflectOutlineColor");
		public const string Cube_Texture = "_Cube";
		public static readonly int Cube_TextureID = Shader.PropertyToID("_Cube");
		public const string EnvMatrixRotation_Vector = "_EnvMatrixRotation";
		public static readonly int EnvMatrixRotation_VectorID = Shader.PropertyToID("_EnvMatrixRotation");
		public const string UnderlayColor_Color = "_UnderlayColor";
		public static readonly int UnderlayColor_ColorID = Shader.PropertyToID("_UnderlayColor");
		public const string UnderlayOffsetX_Range = "_UnderlayOffsetX";
		public static readonly int UnderlayOffsetX_RangeID = Shader.PropertyToID("_UnderlayOffsetX");
		public const string UnderlayOffsetY_Range = "_UnderlayOffsetY";
		public static readonly int UnderlayOffsetY_RangeID = Shader.PropertyToID("_UnderlayOffsetY");
		public const string UnderlayDilate_Range = "_UnderlayDilate";
		public static readonly int UnderlayDilate_RangeID = Shader.PropertyToID("_UnderlayDilate");
		public const string UnderlaySoftness_Range = "_UnderlaySoftness";
		public static readonly int UnderlaySoftness_RangeID = Shader.PropertyToID("_UnderlaySoftness");
		public const string GlowColor_Color = "_GlowColor";
		public static readonly int GlowColor_ColorID = Shader.PropertyToID("_GlowColor");
		public const string GlowOffset_Range = "_GlowOffset";
		public static readonly int GlowOffset_RangeID = Shader.PropertyToID("_GlowOffset");
		public const string GlowInner_Range = "_GlowInner";
		public static readonly int GlowInner_RangeID = Shader.PropertyToID("_GlowInner");
		public const string GlowOuter_Range = "_GlowOuter";
		public static readonly int GlowOuter_RangeID = Shader.PropertyToID("_GlowOuter");
		public const string GlowPower_Range = "_GlowPower";
		public static readonly int GlowPower_RangeID = Shader.PropertyToID("_GlowPower");
		public const string WeightNormal_Float = "_WeightNormal";
		public static readonly int WeightNormal_FloatID = Shader.PropertyToID("_WeightNormal");
		public const string WeightBold_Float = "_WeightBold";
		public static readonly int WeightBold_FloatID = Shader.PropertyToID("_WeightBold");
		public const string ShaderFlags_Float = "_ShaderFlags";
		public static readonly int ShaderFlags_FloatID = Shader.PropertyToID("_ShaderFlags");
		public const string ScaleRatioA_Float = "_ScaleRatioA";
		public static readonly int ScaleRatioA_FloatID = Shader.PropertyToID("_ScaleRatioA");
		public const string ScaleRatioB_Float = "_ScaleRatioB";
		public static readonly int ScaleRatioB_FloatID = Shader.PropertyToID("_ScaleRatioB");
		public const string ScaleRatioC_Float = "_ScaleRatioC";
		public static readonly int ScaleRatioC_FloatID = Shader.PropertyToID("_ScaleRatioC");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string TextureWidth_Float = "_TextureWidth";
		public static readonly int TextureWidth_FloatID = Shader.PropertyToID("_TextureWidth");
		public const string TextureHeight_Float = "_TextureHeight";
		public static readonly int TextureHeight_FloatID = Shader.PropertyToID("_TextureHeight");
		public const string GradientScale_Float = "_GradientScale";
		public static readonly int GradientScale_FloatID = Shader.PropertyToID("_GradientScale");
		public const string ScaleX_Float = "_ScaleX";
		public static readonly int ScaleX_FloatID = Shader.PropertyToID("_ScaleX");
		public const string ScaleY_Float = "_ScaleY";
		public static readonly int ScaleY_FloatID = Shader.PropertyToID("_ScaleY");
		public const string PerspectiveFilter_Range = "_PerspectiveFilter";
		public static readonly int PerspectiveFilter_RangeID = Shader.PropertyToID("_PerspectiveFilter");
		public const string Sharpness_Range = "_Sharpness";
		public static readonly int Sharpness_RangeID = Shader.PropertyToID("_Sharpness");
		public const string VertexOffsetX_Float = "_VertexOffsetX";
		public static readonly int VertexOffsetX_FloatID = Shader.PropertyToID("_VertexOffsetX");
		public const string VertexOffsetY_Float = "_VertexOffsetY";
		public static readonly int VertexOffsetY_FloatID = Shader.PropertyToID("_VertexOffsetY");
		public const string MaskCoord_Vector = "_MaskCoord";
		public static readonly int MaskCoord_VectorID = Shader.PropertyToID("_MaskCoord");
		public const string ClipRect_Vector = "_ClipRect";
		public static readonly int ClipRect_VectorID = Shader.PropertyToID("_ClipRect");
		public const string MaskSoftnessX_Float = "_MaskSoftnessX";
		public static readonly int MaskSoftnessX_FloatID = Shader.PropertyToID("_MaskSoftnessX");
		public const string MaskSoftnessY_Float = "_MaskSoftnessY";
		public static readonly int MaskSoftnessY_FloatID = Shader.PropertyToID("_MaskSoftnessY");
		public const string StencilComp_Float = "_StencilComp";
		public static readonly int StencilComp_FloatID = Shader.PropertyToID("_StencilComp");
		public const string Stencil_Float = "_Stencil";
		public static readonly int Stencil_FloatID = Shader.PropertyToID("_Stencil");
		public const string StencilOp_Float = "_StencilOp";
		public static readonly int StencilOp_FloatID = Shader.PropertyToID("_StencilOp");
		public const string StencilWriteMask_Float = "_StencilWriteMask";
		public static readonly int StencilWriteMask_FloatID = Shader.PropertyToID("_StencilWriteMask");
		public const string StencilReadMask_Float = "_StencilReadMask";
		public static readonly int StencilReadMask_FloatID = Shader.PropertyToID("_StencilReadMask");
		public const string CullMode_Float = "_CullMode";
		public static readonly int CullMode_FloatID = Shader.PropertyToID("_CullMode");
		public const string ColorMask_Float = "_ColorMask";
		public static readonly int ColorMask_FloatID = Shader.PropertyToID("_ColorMask");
		
	} // class TextMeshPro_DistanceFieldSSD
	
	public static class TextMeshPro_Mobile_DistanceField_Masking
	{
		// Members
		public const string FaceColor_Color = "_FaceColor";
		public static readonly int FaceColor_ColorID = Shader.PropertyToID("_FaceColor");
		public const string FaceDilate_Range = "_FaceDilate";
		public static readonly int FaceDilate_RangeID = Shader.PropertyToID("_FaceDilate");
		public const string OutlineColor_Color = "_OutlineColor";
		public static readonly int OutlineColor_ColorID = Shader.PropertyToID("_OutlineColor");
		public const string OutlineWidth_Range = "_OutlineWidth";
		public static readonly int OutlineWidth_RangeID = Shader.PropertyToID("_OutlineWidth");
		public const string OutlineSoftness_Range = "_OutlineSoftness";
		public static readonly int OutlineSoftness_RangeID = Shader.PropertyToID("_OutlineSoftness");
		public const string UnderlayColor_Color = "_UnderlayColor";
		public static readonly int UnderlayColor_ColorID = Shader.PropertyToID("_UnderlayColor");
		public const string UnderlayOffsetX_Range = "_UnderlayOffsetX";
		public static readonly int UnderlayOffsetX_RangeID = Shader.PropertyToID("_UnderlayOffsetX");
		public const string UnderlayOffsetY_Range = "_UnderlayOffsetY";
		public static readonly int UnderlayOffsetY_RangeID = Shader.PropertyToID("_UnderlayOffsetY");
		public const string UnderlayDilate_Range = "_UnderlayDilate";
		public static readonly int UnderlayDilate_RangeID = Shader.PropertyToID("_UnderlayDilate");
		public const string UnderlaySoftness_Range = "_UnderlaySoftness";
		public static readonly int UnderlaySoftness_RangeID = Shader.PropertyToID("_UnderlaySoftness");
		public const string WeightNormal_Float = "_WeightNormal";
		public static readonly int WeightNormal_FloatID = Shader.PropertyToID("_WeightNormal");
		public const string WeightBold_Float = "_WeightBold";
		public static readonly int WeightBold_FloatID = Shader.PropertyToID("_WeightBold");
		public const string ShaderFlags_Float = "_ShaderFlags";
		public static readonly int ShaderFlags_FloatID = Shader.PropertyToID("_ShaderFlags");
		public const string ScaleRatioA_Float = "_ScaleRatioA";
		public static readonly int ScaleRatioA_FloatID = Shader.PropertyToID("_ScaleRatioA");
		public const string ScaleRatioB_Float = "_ScaleRatioB";
		public static readonly int ScaleRatioB_FloatID = Shader.PropertyToID("_ScaleRatioB");
		public const string ScaleRatioC_Float = "_ScaleRatioC";
		public static readonly int ScaleRatioC_FloatID = Shader.PropertyToID("_ScaleRatioC");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string TextureWidth_Float = "_TextureWidth";
		public static readonly int TextureWidth_FloatID = Shader.PropertyToID("_TextureWidth");
		public const string TextureHeight_Float = "_TextureHeight";
		public static readonly int TextureHeight_FloatID = Shader.PropertyToID("_TextureHeight");
		public const string GradientScale_Float = "_GradientScale";
		public static readonly int GradientScale_FloatID = Shader.PropertyToID("_GradientScale");
		public const string ScaleX_Float = "_ScaleX";
		public static readonly int ScaleX_FloatID = Shader.PropertyToID("_ScaleX");
		public const string ScaleY_Float = "_ScaleY";
		public static readonly int ScaleY_FloatID = Shader.PropertyToID("_ScaleY");
		public const string PerspectiveFilter_Range = "_PerspectiveFilter";
		public static readonly int PerspectiveFilter_RangeID = Shader.PropertyToID("_PerspectiveFilter");
		public const string Sharpness_Range = "_Sharpness";
		public static readonly int Sharpness_RangeID = Shader.PropertyToID("_Sharpness");
		public const string VertexOffsetX_Float = "_VertexOffsetX";
		public static readonly int VertexOffsetX_FloatID = Shader.PropertyToID("_VertexOffsetX");
		public const string VertexOffsetY_Float = "_VertexOffsetY";
		public static readonly int VertexOffsetY_FloatID = Shader.PropertyToID("_VertexOffsetY");
		public const string ClipRect_Vector = "_ClipRect";
		public static readonly int ClipRect_VectorID = Shader.PropertyToID("_ClipRect");
		public const string MaskSoftnessX_Float = "_MaskSoftnessX";
		public static readonly int MaskSoftnessX_FloatID = Shader.PropertyToID("_MaskSoftnessX");
		public const string MaskSoftnessY_Float = "_MaskSoftnessY";
		public static readonly int MaskSoftnessY_FloatID = Shader.PropertyToID("_MaskSoftnessY");
		public const string MaskTex_Texture = "_MaskTex";
		public static readonly int MaskTex_TextureID = Shader.PropertyToID("_MaskTex");
		public const string MaskInverse_Float = "_MaskInverse";
		public static readonly int MaskInverse_FloatID = Shader.PropertyToID("_MaskInverse");
		public const string MaskEdgeColor_Color = "_MaskEdgeColor";
		public static readonly int MaskEdgeColor_ColorID = Shader.PropertyToID("_MaskEdgeColor");
		public const string MaskEdgeSoftness_Range = "_MaskEdgeSoftness";
		public static readonly int MaskEdgeSoftness_RangeID = Shader.PropertyToID("_MaskEdgeSoftness");
		public const string MaskWipeControl_Range = "_MaskWipeControl";
		public static readonly int MaskWipeControl_RangeID = Shader.PropertyToID("_MaskWipeControl");
		public const string StencilComp_Float = "_StencilComp";
		public static readonly int StencilComp_FloatID = Shader.PropertyToID("_StencilComp");
		public const string Stencil_Float = "_Stencil";
		public static readonly int Stencil_FloatID = Shader.PropertyToID("_Stencil");
		public const string StencilOp_Float = "_StencilOp";
		public static readonly int StencilOp_FloatID = Shader.PropertyToID("_StencilOp");
		public const string StencilWriteMask_Float = "_StencilWriteMask";
		public static readonly int StencilWriteMask_FloatID = Shader.PropertyToID("_StencilWriteMask");
		public const string StencilReadMask_Float = "_StencilReadMask";
		public static readonly int StencilReadMask_FloatID = Shader.PropertyToID("_StencilReadMask");
		public const string CullMode_Float = "_CullMode";
		public static readonly int CullMode_FloatID = Shader.PropertyToID("_CullMode");
		public const string ColorMask_Float = "_ColorMask";
		public static readonly int ColorMask_FloatID = Shader.PropertyToID("_ColorMask");
		
	} // class TextMeshPro_Mobile_DistanceField_Masking
	
	public static class TextMeshPro_Mobile_DistanceFieldOverlay
	{
		// Members
		public const string FaceColor_Color = "_FaceColor";
		public static readonly int FaceColor_ColorID = Shader.PropertyToID("_FaceColor");
		public const string FaceDilate_Range = "_FaceDilate";
		public static readonly int FaceDilate_RangeID = Shader.PropertyToID("_FaceDilate");
		public const string OutlineColor_Color = "_OutlineColor";
		public static readonly int OutlineColor_ColorID = Shader.PropertyToID("_OutlineColor");
		public const string OutlineWidth_Range = "_OutlineWidth";
		public static readonly int OutlineWidth_RangeID = Shader.PropertyToID("_OutlineWidth");
		public const string OutlineSoftness_Range = "_OutlineSoftness";
		public static readonly int OutlineSoftness_RangeID = Shader.PropertyToID("_OutlineSoftness");
		public const string UnderlayColor_Color = "_UnderlayColor";
		public static readonly int UnderlayColor_ColorID = Shader.PropertyToID("_UnderlayColor");
		public const string UnderlayOffsetX_Range = "_UnderlayOffsetX";
		public static readonly int UnderlayOffsetX_RangeID = Shader.PropertyToID("_UnderlayOffsetX");
		public const string UnderlayOffsetY_Range = "_UnderlayOffsetY";
		public static readonly int UnderlayOffsetY_RangeID = Shader.PropertyToID("_UnderlayOffsetY");
		public const string UnderlayDilate_Range = "_UnderlayDilate";
		public static readonly int UnderlayDilate_RangeID = Shader.PropertyToID("_UnderlayDilate");
		public const string UnderlaySoftness_Range = "_UnderlaySoftness";
		public static readonly int UnderlaySoftness_RangeID = Shader.PropertyToID("_UnderlaySoftness");
		public const string WeightNormal_Float = "_WeightNormal";
		public static readonly int WeightNormal_FloatID = Shader.PropertyToID("_WeightNormal");
		public const string WeightBold_Float = "_WeightBold";
		public static readonly int WeightBold_FloatID = Shader.PropertyToID("_WeightBold");
		public const string ShaderFlags_Float = "_ShaderFlags";
		public static readonly int ShaderFlags_FloatID = Shader.PropertyToID("_ShaderFlags");
		public const string ScaleRatioA_Float = "_ScaleRatioA";
		public static readonly int ScaleRatioA_FloatID = Shader.PropertyToID("_ScaleRatioA");
		public const string ScaleRatioB_Float = "_ScaleRatioB";
		public static readonly int ScaleRatioB_FloatID = Shader.PropertyToID("_ScaleRatioB");
		public const string ScaleRatioC_Float = "_ScaleRatioC";
		public static readonly int ScaleRatioC_FloatID = Shader.PropertyToID("_ScaleRatioC");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string TextureWidth_Float = "_TextureWidth";
		public static readonly int TextureWidth_FloatID = Shader.PropertyToID("_TextureWidth");
		public const string TextureHeight_Float = "_TextureHeight";
		public static readonly int TextureHeight_FloatID = Shader.PropertyToID("_TextureHeight");
		public const string GradientScale_Float = "_GradientScale";
		public static readonly int GradientScale_FloatID = Shader.PropertyToID("_GradientScale");
		public const string ScaleX_Float = "_ScaleX";
		public static readonly int ScaleX_FloatID = Shader.PropertyToID("_ScaleX");
		public const string ScaleY_Float = "_ScaleY";
		public static readonly int ScaleY_FloatID = Shader.PropertyToID("_ScaleY");
		public const string PerspectiveFilter_Range = "_PerspectiveFilter";
		public static readonly int PerspectiveFilter_RangeID = Shader.PropertyToID("_PerspectiveFilter");
		public const string Sharpness_Range = "_Sharpness";
		public static readonly int Sharpness_RangeID = Shader.PropertyToID("_Sharpness");
		public const string VertexOffsetX_Float = "_VertexOffsetX";
		public static readonly int VertexOffsetX_FloatID = Shader.PropertyToID("_VertexOffsetX");
		public const string VertexOffsetY_Float = "_VertexOffsetY";
		public static readonly int VertexOffsetY_FloatID = Shader.PropertyToID("_VertexOffsetY");
		public const string ClipRect_Vector = "_ClipRect";
		public static readonly int ClipRect_VectorID = Shader.PropertyToID("_ClipRect");
		public const string MaskSoftnessX_Float = "_MaskSoftnessX";
		public static readonly int MaskSoftnessX_FloatID = Shader.PropertyToID("_MaskSoftnessX");
		public const string MaskSoftnessY_Float = "_MaskSoftnessY";
		public static readonly int MaskSoftnessY_FloatID = Shader.PropertyToID("_MaskSoftnessY");
		public const string StencilComp_Float = "_StencilComp";
		public static readonly int StencilComp_FloatID = Shader.PropertyToID("_StencilComp");
		public const string Stencil_Float = "_Stencil";
		public static readonly int Stencil_FloatID = Shader.PropertyToID("_Stencil");
		public const string StencilOp_Float = "_StencilOp";
		public static readonly int StencilOp_FloatID = Shader.PropertyToID("_StencilOp");
		public const string StencilWriteMask_Float = "_StencilWriteMask";
		public static readonly int StencilWriteMask_FloatID = Shader.PropertyToID("_StencilWriteMask");
		public const string StencilReadMask_Float = "_StencilReadMask";
		public static readonly int StencilReadMask_FloatID = Shader.PropertyToID("_StencilReadMask");
		public const string CullMode_Float = "_CullMode";
		public static readonly int CullMode_FloatID = Shader.PropertyToID("_CullMode");
		public const string ColorMask_Float = "_ColorMask";
		public static readonly int ColorMask_FloatID = Shader.PropertyToID("_ColorMask");
		
	} // class TextMeshPro_Mobile_DistanceFieldOverlay
	
	public static class TextMeshPro_Mobile_DistanceFieldSSD
	{
		// Members
		public const string FaceColor_Color = "_FaceColor";
		public static readonly int FaceColor_ColorID = Shader.PropertyToID("_FaceColor");
		public const string FaceDilate_Range = "_FaceDilate";
		public static readonly int FaceDilate_RangeID = Shader.PropertyToID("_FaceDilate");
		public const string OutlineColor_Color = "_OutlineColor";
		public static readonly int OutlineColor_ColorID = Shader.PropertyToID("_OutlineColor");
		public const string OutlineWidth_Range = "_OutlineWidth";
		public static readonly int OutlineWidth_RangeID = Shader.PropertyToID("_OutlineWidth");
		public const string OutlineSoftness_Range = "_OutlineSoftness";
		public static readonly int OutlineSoftness_RangeID = Shader.PropertyToID("_OutlineSoftness");
		public const string UnderlayColor_Color = "_UnderlayColor";
		public static readonly int UnderlayColor_ColorID = Shader.PropertyToID("_UnderlayColor");
		public const string UnderlayOffsetX_Range = "_UnderlayOffsetX";
		public static readonly int UnderlayOffsetX_RangeID = Shader.PropertyToID("_UnderlayOffsetX");
		public const string UnderlayOffsetY_Range = "_UnderlayOffsetY";
		public static readonly int UnderlayOffsetY_RangeID = Shader.PropertyToID("_UnderlayOffsetY");
		public const string UnderlayDilate_Range = "_UnderlayDilate";
		public static readonly int UnderlayDilate_RangeID = Shader.PropertyToID("_UnderlayDilate");
		public const string UnderlaySoftness_Range = "_UnderlaySoftness";
		public static readonly int UnderlaySoftness_RangeID = Shader.PropertyToID("_UnderlaySoftness");
		public const string WeightNormal_Float = "_WeightNormal";
		public static readonly int WeightNormal_FloatID = Shader.PropertyToID("_WeightNormal");
		public const string WeightBold_Float = "_WeightBold";
		public static readonly int WeightBold_FloatID = Shader.PropertyToID("_WeightBold");
		public const string ShaderFlags_Float = "_ShaderFlags";
		public static readonly int ShaderFlags_FloatID = Shader.PropertyToID("_ShaderFlags");
		public const string ScaleRatioA_Float = "_ScaleRatioA";
		public static readonly int ScaleRatioA_FloatID = Shader.PropertyToID("_ScaleRatioA");
		public const string ScaleRatioB_Float = "_ScaleRatioB";
		public static readonly int ScaleRatioB_FloatID = Shader.PropertyToID("_ScaleRatioB");
		public const string ScaleRatioC_Float = "_ScaleRatioC";
		public static readonly int ScaleRatioC_FloatID = Shader.PropertyToID("_ScaleRatioC");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string TextureWidth_Float = "_TextureWidth";
		public static readonly int TextureWidth_FloatID = Shader.PropertyToID("_TextureWidth");
		public const string TextureHeight_Float = "_TextureHeight";
		public static readonly int TextureHeight_FloatID = Shader.PropertyToID("_TextureHeight");
		public const string GradientScale_Float = "_GradientScale";
		public static readonly int GradientScale_FloatID = Shader.PropertyToID("_GradientScale");
		public const string ScaleX_Float = "_ScaleX";
		public static readonly int ScaleX_FloatID = Shader.PropertyToID("_ScaleX");
		public const string ScaleY_Float = "_ScaleY";
		public static readonly int ScaleY_FloatID = Shader.PropertyToID("_ScaleY");
		public const string PerspectiveFilter_Range = "_PerspectiveFilter";
		public static readonly int PerspectiveFilter_RangeID = Shader.PropertyToID("_PerspectiveFilter");
		public const string Sharpness_Range = "_Sharpness";
		public static readonly int Sharpness_RangeID = Shader.PropertyToID("_Sharpness");
		public const string VertexOffsetX_Float = "_VertexOffsetX";
		public static readonly int VertexOffsetX_FloatID = Shader.PropertyToID("_VertexOffsetX");
		public const string VertexOffsetY_Float = "_VertexOffsetY";
		public static readonly int VertexOffsetY_FloatID = Shader.PropertyToID("_VertexOffsetY");
		public const string ClipRect_Vector = "_ClipRect";
		public static readonly int ClipRect_VectorID = Shader.PropertyToID("_ClipRect");
		public const string MaskSoftnessX_Float = "_MaskSoftnessX";
		public static readonly int MaskSoftnessX_FloatID = Shader.PropertyToID("_MaskSoftnessX");
		public const string MaskSoftnessY_Float = "_MaskSoftnessY";
		public static readonly int MaskSoftnessY_FloatID = Shader.PropertyToID("_MaskSoftnessY");
		public const string MaskTex_Texture = "_MaskTex";
		public static readonly int MaskTex_TextureID = Shader.PropertyToID("_MaskTex");
		public const string MaskInverse_Float = "_MaskInverse";
		public static readonly int MaskInverse_FloatID = Shader.PropertyToID("_MaskInverse");
		public const string MaskEdgeColor_Color = "_MaskEdgeColor";
		public static readonly int MaskEdgeColor_ColorID = Shader.PropertyToID("_MaskEdgeColor");
		public const string MaskEdgeSoftness_Range = "_MaskEdgeSoftness";
		public static readonly int MaskEdgeSoftness_RangeID = Shader.PropertyToID("_MaskEdgeSoftness");
		public const string MaskWipeControl_Range = "_MaskWipeControl";
		public static readonly int MaskWipeControl_RangeID = Shader.PropertyToID("_MaskWipeControl");
		public const string StencilComp_Float = "_StencilComp";
		public static readonly int StencilComp_FloatID = Shader.PropertyToID("_StencilComp");
		public const string Stencil_Float = "_Stencil";
		public static readonly int Stencil_FloatID = Shader.PropertyToID("_Stencil");
		public const string StencilOp_Float = "_StencilOp";
		public static readonly int StencilOp_FloatID = Shader.PropertyToID("_StencilOp");
		public const string StencilWriteMask_Float = "_StencilWriteMask";
		public static readonly int StencilWriteMask_FloatID = Shader.PropertyToID("_StencilWriteMask");
		public const string StencilReadMask_Float = "_StencilReadMask";
		public static readonly int StencilReadMask_FloatID = Shader.PropertyToID("_StencilReadMask");
		public const string CullMode_Float = "_CullMode";
		public static readonly int CullMode_FloatID = Shader.PropertyToID("_CullMode");
		public const string ColorMask_Float = "_ColorMask";
		public static readonly int ColorMask_FloatID = Shader.PropertyToID("_ColorMask");
		
	} // class TextMeshPro_Mobile_DistanceFieldSSD
	
	public static class TextMeshPro_Mobile_DistanceField
	{
		// Members
		public const string FaceColor_Color = "_FaceColor";
		public static readonly int FaceColor_ColorID = Shader.PropertyToID("_FaceColor");
		public const string FaceDilate_Range = "_FaceDilate";
		public static readonly int FaceDilate_RangeID = Shader.PropertyToID("_FaceDilate");
		public const string OutlineColor_Color = "_OutlineColor";
		public static readonly int OutlineColor_ColorID = Shader.PropertyToID("_OutlineColor");
		public const string OutlineWidth_Range = "_OutlineWidth";
		public static readonly int OutlineWidth_RangeID = Shader.PropertyToID("_OutlineWidth");
		public const string OutlineSoftness_Range = "_OutlineSoftness";
		public static readonly int OutlineSoftness_RangeID = Shader.PropertyToID("_OutlineSoftness");
		public const string UnderlayColor_Color = "_UnderlayColor";
		public static readonly int UnderlayColor_ColorID = Shader.PropertyToID("_UnderlayColor");
		public const string UnderlayOffsetX_Range = "_UnderlayOffsetX";
		public static readonly int UnderlayOffsetX_RangeID = Shader.PropertyToID("_UnderlayOffsetX");
		public const string UnderlayOffsetY_Range = "_UnderlayOffsetY";
		public static readonly int UnderlayOffsetY_RangeID = Shader.PropertyToID("_UnderlayOffsetY");
		public const string UnderlayDilate_Range = "_UnderlayDilate";
		public static readonly int UnderlayDilate_RangeID = Shader.PropertyToID("_UnderlayDilate");
		public const string UnderlaySoftness_Range = "_UnderlaySoftness";
		public static readonly int UnderlaySoftness_RangeID = Shader.PropertyToID("_UnderlaySoftness");
		public const string WeightNormal_Float = "_WeightNormal";
		public static readonly int WeightNormal_FloatID = Shader.PropertyToID("_WeightNormal");
		public const string WeightBold_Float = "_WeightBold";
		public static readonly int WeightBold_FloatID = Shader.PropertyToID("_WeightBold");
		public const string ShaderFlags_Float = "_ShaderFlags";
		public static readonly int ShaderFlags_FloatID = Shader.PropertyToID("_ShaderFlags");
		public const string ScaleRatioA_Float = "_ScaleRatioA";
		public static readonly int ScaleRatioA_FloatID = Shader.PropertyToID("_ScaleRatioA");
		public const string ScaleRatioB_Float = "_ScaleRatioB";
		public static readonly int ScaleRatioB_FloatID = Shader.PropertyToID("_ScaleRatioB");
		public const string ScaleRatioC_Float = "_ScaleRatioC";
		public static readonly int ScaleRatioC_FloatID = Shader.PropertyToID("_ScaleRatioC");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string TextureWidth_Float = "_TextureWidth";
		public static readonly int TextureWidth_FloatID = Shader.PropertyToID("_TextureWidth");
		public const string TextureHeight_Float = "_TextureHeight";
		public static readonly int TextureHeight_FloatID = Shader.PropertyToID("_TextureHeight");
		public const string GradientScale_Float = "_GradientScale";
		public static readonly int GradientScale_FloatID = Shader.PropertyToID("_GradientScale");
		public const string ScaleX_Float = "_ScaleX";
		public static readonly int ScaleX_FloatID = Shader.PropertyToID("_ScaleX");
		public const string ScaleY_Float = "_ScaleY";
		public static readonly int ScaleY_FloatID = Shader.PropertyToID("_ScaleY");
		public const string PerspectiveFilter_Range = "_PerspectiveFilter";
		public static readonly int PerspectiveFilter_RangeID = Shader.PropertyToID("_PerspectiveFilter");
		public const string Sharpness_Range = "_Sharpness";
		public static readonly int Sharpness_RangeID = Shader.PropertyToID("_Sharpness");
		public const string VertexOffsetX_Float = "_VertexOffsetX";
		public static readonly int VertexOffsetX_FloatID = Shader.PropertyToID("_VertexOffsetX");
		public const string VertexOffsetY_Float = "_VertexOffsetY";
		public static readonly int VertexOffsetY_FloatID = Shader.PropertyToID("_VertexOffsetY");
		public const string ClipRect_Vector = "_ClipRect";
		public static readonly int ClipRect_VectorID = Shader.PropertyToID("_ClipRect");
		public const string MaskSoftnessX_Float = "_MaskSoftnessX";
		public static readonly int MaskSoftnessX_FloatID = Shader.PropertyToID("_MaskSoftnessX");
		public const string MaskSoftnessY_Float = "_MaskSoftnessY";
		public static readonly int MaskSoftnessY_FloatID = Shader.PropertyToID("_MaskSoftnessY");
		public const string StencilComp_Float = "_StencilComp";
		public static readonly int StencilComp_FloatID = Shader.PropertyToID("_StencilComp");
		public const string Stencil_Float = "_Stencil";
		public static readonly int Stencil_FloatID = Shader.PropertyToID("_Stencil");
		public const string StencilOp_Float = "_StencilOp";
		public static readonly int StencilOp_FloatID = Shader.PropertyToID("_StencilOp");
		public const string StencilWriteMask_Float = "_StencilWriteMask";
		public static readonly int StencilWriteMask_FloatID = Shader.PropertyToID("_StencilWriteMask");
		public const string StencilReadMask_Float = "_StencilReadMask";
		public static readonly int StencilReadMask_FloatID = Shader.PropertyToID("_StencilReadMask");
		public const string CullMode_Float = "_CullMode";
		public static readonly int CullMode_FloatID = Shader.PropertyToID("_CullMode");
		public const string ColorMask_Float = "_ColorMask";
		public static readonly int ColorMask_FloatID = Shader.PropertyToID("_ColorMask");
		
	} // class TextMeshPro_Mobile_DistanceField
	
	public static class TextMeshPro_Mobile_DistanceFieldSurface
	{
		// Members
		public const string FaceTex_Texture = "_FaceTex";
		public static readonly int FaceTex_TextureID = Shader.PropertyToID("_FaceTex");
		public const string FaceColor_Color = "_FaceColor";
		public static readonly int FaceColor_ColorID = Shader.PropertyToID("_FaceColor");
		public const string FaceDilate_Range = "_FaceDilate";
		public static readonly int FaceDilate_RangeID = Shader.PropertyToID("_FaceDilate");
		public const string OutlineColor_Color = "_OutlineColor";
		public static readonly int OutlineColor_ColorID = Shader.PropertyToID("_OutlineColor");
		public const string OutlineTex_Texture = "_OutlineTex";
		public static readonly int OutlineTex_TextureID = Shader.PropertyToID("_OutlineTex");
		public const string OutlineWidth_Range = "_OutlineWidth";
		public static readonly int OutlineWidth_RangeID = Shader.PropertyToID("_OutlineWidth");
		public const string OutlineSoftness_Range = "_OutlineSoftness";
		public static readonly int OutlineSoftness_RangeID = Shader.PropertyToID("_OutlineSoftness");
		public const string GlowColor_Color = "_GlowColor";
		public static readonly int GlowColor_ColorID = Shader.PropertyToID("_GlowColor");
		public const string GlowOffset_Range = "_GlowOffset";
		public static readonly int GlowOffset_RangeID = Shader.PropertyToID("_GlowOffset");
		public const string GlowInner_Range = "_GlowInner";
		public static readonly int GlowInner_RangeID = Shader.PropertyToID("_GlowInner");
		public const string GlowOuter_Range = "_GlowOuter";
		public static readonly int GlowOuter_RangeID = Shader.PropertyToID("_GlowOuter");
		public const string GlowPower_Range = "_GlowPower";
		public static readonly int GlowPower_RangeID = Shader.PropertyToID("_GlowPower");
		public const string WeightNormal_Float = "_WeightNormal";
		public static readonly int WeightNormal_FloatID = Shader.PropertyToID("_WeightNormal");
		public const string WeightBold_Float = "_WeightBold";
		public static readonly int WeightBold_FloatID = Shader.PropertyToID("_WeightBold");
		public const string ShaderFlags_Float = "_ShaderFlags";
		public static readonly int ShaderFlags_FloatID = Shader.PropertyToID("_ShaderFlags");
		public const string ScaleRatioA_Float = "_ScaleRatioA";
		public static readonly int ScaleRatioA_FloatID = Shader.PropertyToID("_ScaleRatioA");
		public const string ScaleRatioB_Float = "_ScaleRatioB";
		public static readonly int ScaleRatioB_FloatID = Shader.PropertyToID("_ScaleRatioB");
		public const string ScaleRatioC_Float = "_ScaleRatioC";
		public static readonly int ScaleRatioC_FloatID = Shader.PropertyToID("_ScaleRatioC");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string TextureWidth_Float = "_TextureWidth";
		public static readonly int TextureWidth_FloatID = Shader.PropertyToID("_TextureWidth");
		public const string TextureHeight_Float = "_TextureHeight";
		public static readonly int TextureHeight_FloatID = Shader.PropertyToID("_TextureHeight");
		public const string GradientScale_Float = "_GradientScale";
		public static readonly int GradientScale_FloatID = Shader.PropertyToID("_GradientScale");
		public const string ScaleX_Float = "_ScaleX";
		public static readonly int ScaleX_FloatID = Shader.PropertyToID("_ScaleX");
		public const string ScaleY_Float = "_ScaleY";
		public static readonly int ScaleY_FloatID = Shader.PropertyToID("_ScaleY");
		public const string PerspectiveFilter_Range = "_PerspectiveFilter";
		public static readonly int PerspectiveFilter_RangeID = Shader.PropertyToID("_PerspectiveFilter");
		public const string Sharpness_Range = "_Sharpness";
		public static readonly int Sharpness_RangeID = Shader.PropertyToID("_Sharpness");
		public const string VertexOffsetX_Float = "_VertexOffsetX";
		public static readonly int VertexOffsetX_FloatID = Shader.PropertyToID("_VertexOffsetX");
		public const string VertexOffsetY_Float = "_VertexOffsetY";
		public static readonly int VertexOffsetY_FloatID = Shader.PropertyToID("_VertexOffsetY");
		public const string CullMode_Float = "_CullMode";
		public static readonly int CullMode_FloatID = Shader.PropertyToID("_CullMode");
		
	} // class TextMeshPro_Mobile_DistanceFieldSurface
	
	public static class TextMeshPro_DistanceFieldSurface
	{
		// Members
		public const string FaceTex_Texture = "_FaceTex";
		public static readonly int FaceTex_TextureID = Shader.PropertyToID("_FaceTex");
		public const string FaceUVSpeedX_Range = "_FaceUVSpeedX";
		public static readonly int FaceUVSpeedX_RangeID = Shader.PropertyToID("_FaceUVSpeedX");
		public const string FaceUVSpeedY_Range = "_FaceUVSpeedY";
		public static readonly int FaceUVSpeedY_RangeID = Shader.PropertyToID("_FaceUVSpeedY");
		public const string FaceColor_Color = "_FaceColor";
		public static readonly int FaceColor_ColorID = Shader.PropertyToID("_FaceColor");
		public const string FaceDilate_Range = "_FaceDilate";
		public static readonly int FaceDilate_RangeID = Shader.PropertyToID("_FaceDilate");
		public const string OutlineColor_Color = "_OutlineColor";
		public static readonly int OutlineColor_ColorID = Shader.PropertyToID("_OutlineColor");
		public const string OutlineTex_Texture = "_OutlineTex";
		public static readonly int OutlineTex_TextureID = Shader.PropertyToID("_OutlineTex");
		public const string OutlineUVSpeedX_Range = "_OutlineUVSpeedX";
		public static readonly int OutlineUVSpeedX_RangeID = Shader.PropertyToID("_OutlineUVSpeedX");
		public const string OutlineUVSpeedY_Range = "_OutlineUVSpeedY";
		public static readonly int OutlineUVSpeedY_RangeID = Shader.PropertyToID("_OutlineUVSpeedY");
		public const string OutlineWidth_Range = "_OutlineWidth";
		public static readonly int OutlineWidth_RangeID = Shader.PropertyToID("_OutlineWidth");
		public const string OutlineSoftness_Range = "_OutlineSoftness";
		public static readonly int OutlineSoftness_RangeID = Shader.PropertyToID("_OutlineSoftness");
		public const string Bevel_Range = "_Bevel";
		public static readonly int Bevel_RangeID = Shader.PropertyToID("_Bevel");
		public const string BevelOffset_Range = "_BevelOffset";
		public static readonly int BevelOffset_RangeID = Shader.PropertyToID("_BevelOffset");
		public const string BevelWidth_Range = "_BevelWidth";
		public static readonly int BevelWidth_RangeID = Shader.PropertyToID("_BevelWidth");
		public const string BevelClamp_Range = "_BevelClamp";
		public static readonly int BevelClamp_RangeID = Shader.PropertyToID("_BevelClamp");
		public const string BevelRoundness_Range = "_BevelRoundness";
		public static readonly int BevelRoundness_RangeID = Shader.PropertyToID("_BevelRoundness");
		public const string BumpMap_Texture = "_BumpMap";
		public static readonly int BumpMap_TextureID = Shader.PropertyToID("_BumpMap");
		public const string BumpOutline_Range = "_BumpOutline";
		public static readonly int BumpOutline_RangeID = Shader.PropertyToID("_BumpOutline");
		public const string BumpFace_Range = "_BumpFace";
		public static readonly int BumpFace_RangeID = Shader.PropertyToID("_BumpFace");
		public const string ReflectFaceColor_Color = "_ReflectFaceColor";
		public static readonly int ReflectFaceColor_ColorID = Shader.PropertyToID("_ReflectFaceColor");
		public const string ReflectOutlineColor_Color = "_ReflectOutlineColor";
		public static readonly int ReflectOutlineColor_ColorID = Shader.PropertyToID("_ReflectOutlineColor");
		public const string Cube_Texture = "_Cube";
		public static readonly int Cube_TextureID = Shader.PropertyToID("_Cube");
		public const string EnvMatrixRotation_Vector = "_EnvMatrixRotation";
		public static readonly int EnvMatrixRotation_VectorID = Shader.PropertyToID("_EnvMatrixRotation");
		public const string SpecColor_Color = "_SpecColor";
		public static readonly int SpecColor_ColorID = Shader.PropertyToID("_SpecColor");
		public const string FaceShininess_Range = "_FaceShininess";
		public static readonly int FaceShininess_RangeID = Shader.PropertyToID("_FaceShininess");
		public const string OutlineShininess_Range = "_OutlineShininess";
		public static readonly int OutlineShininess_RangeID = Shader.PropertyToID("_OutlineShininess");
		public const string GlowColor_Color = "_GlowColor";
		public static readonly int GlowColor_ColorID = Shader.PropertyToID("_GlowColor");
		public const string GlowOffset_Range = "_GlowOffset";
		public static readonly int GlowOffset_RangeID = Shader.PropertyToID("_GlowOffset");
		public const string GlowInner_Range = "_GlowInner";
		public static readonly int GlowInner_RangeID = Shader.PropertyToID("_GlowInner");
		public const string GlowOuter_Range = "_GlowOuter";
		public static readonly int GlowOuter_RangeID = Shader.PropertyToID("_GlowOuter");
		public const string GlowPower_Range = "_GlowPower";
		public static readonly int GlowPower_RangeID = Shader.PropertyToID("_GlowPower");
		public const string WeightNormal_Float = "_WeightNormal";
		public static readonly int WeightNormal_FloatID = Shader.PropertyToID("_WeightNormal");
		public const string WeightBold_Float = "_WeightBold";
		public static readonly int WeightBold_FloatID = Shader.PropertyToID("_WeightBold");
		public const string ShaderFlags_Float = "_ShaderFlags";
		public static readonly int ShaderFlags_FloatID = Shader.PropertyToID("_ShaderFlags");
		public const string ScaleRatioA_Float = "_ScaleRatioA";
		public static readonly int ScaleRatioA_FloatID = Shader.PropertyToID("_ScaleRatioA");
		public const string ScaleRatioB_Float = "_ScaleRatioB";
		public static readonly int ScaleRatioB_FloatID = Shader.PropertyToID("_ScaleRatioB");
		public const string ScaleRatioC_Float = "_ScaleRatioC";
		public static readonly int ScaleRatioC_FloatID = Shader.PropertyToID("_ScaleRatioC");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string TextureWidth_Float = "_TextureWidth";
		public static readonly int TextureWidth_FloatID = Shader.PropertyToID("_TextureWidth");
		public const string TextureHeight_Float = "_TextureHeight";
		public static readonly int TextureHeight_FloatID = Shader.PropertyToID("_TextureHeight");
		public const string GradientScale_Float = "_GradientScale";
		public static readonly int GradientScale_FloatID = Shader.PropertyToID("_GradientScale");
		public const string ScaleX_Float = "_ScaleX";
		public static readonly int ScaleX_FloatID = Shader.PropertyToID("_ScaleX");
		public const string ScaleY_Float = "_ScaleY";
		public static readonly int ScaleY_FloatID = Shader.PropertyToID("_ScaleY");
		public const string PerspectiveFilter_Range = "_PerspectiveFilter";
		public static readonly int PerspectiveFilter_RangeID = Shader.PropertyToID("_PerspectiveFilter");
		public const string Sharpness_Range = "_Sharpness";
		public static readonly int Sharpness_RangeID = Shader.PropertyToID("_Sharpness");
		public const string VertexOffsetX_Float = "_VertexOffsetX";
		public static readonly int VertexOffsetX_FloatID = Shader.PropertyToID("_VertexOffsetX");
		public const string VertexOffsetY_Float = "_VertexOffsetY";
		public static readonly int VertexOffsetY_FloatID = Shader.PropertyToID("_VertexOffsetY");
		public const string CullMode_Float = "_CullMode";
		public static readonly int CullMode_FloatID = Shader.PropertyToID("_CullMode");
		
	} // class TextMeshPro_DistanceFieldSurface
	
	public static class TextMeshPro_DistanceField
	{
		// Members
		public const string FaceTex_Texture = "_FaceTex";
		public static readonly int FaceTex_TextureID = Shader.PropertyToID("_FaceTex");
		public const string FaceUVSpeedX_Range = "_FaceUVSpeedX";
		public static readonly int FaceUVSpeedX_RangeID = Shader.PropertyToID("_FaceUVSpeedX");
		public const string FaceUVSpeedY_Range = "_FaceUVSpeedY";
		public static readonly int FaceUVSpeedY_RangeID = Shader.PropertyToID("_FaceUVSpeedY");
		public const string FaceColor_Color = "_FaceColor";
		public static readonly int FaceColor_ColorID = Shader.PropertyToID("_FaceColor");
		public const string FaceDilate_Range = "_FaceDilate";
		public static readonly int FaceDilate_RangeID = Shader.PropertyToID("_FaceDilate");
		public const string OutlineColor_Color = "_OutlineColor";
		public static readonly int OutlineColor_ColorID = Shader.PropertyToID("_OutlineColor");
		public const string OutlineTex_Texture = "_OutlineTex";
		public static readonly int OutlineTex_TextureID = Shader.PropertyToID("_OutlineTex");
		public const string OutlineUVSpeedX_Range = "_OutlineUVSpeedX";
		public static readonly int OutlineUVSpeedX_RangeID = Shader.PropertyToID("_OutlineUVSpeedX");
		public const string OutlineUVSpeedY_Range = "_OutlineUVSpeedY";
		public static readonly int OutlineUVSpeedY_RangeID = Shader.PropertyToID("_OutlineUVSpeedY");
		public const string OutlineWidth_Range = "_OutlineWidth";
		public static readonly int OutlineWidth_RangeID = Shader.PropertyToID("_OutlineWidth");
		public const string OutlineSoftness_Range = "_OutlineSoftness";
		public static readonly int OutlineSoftness_RangeID = Shader.PropertyToID("_OutlineSoftness");
		public const string Bevel_Range = "_Bevel";
		public static readonly int Bevel_RangeID = Shader.PropertyToID("_Bevel");
		public const string BevelOffset_Range = "_BevelOffset";
		public static readonly int BevelOffset_RangeID = Shader.PropertyToID("_BevelOffset");
		public const string BevelWidth_Range = "_BevelWidth";
		public static readonly int BevelWidth_RangeID = Shader.PropertyToID("_BevelWidth");
		public const string BevelClamp_Range = "_BevelClamp";
		public static readonly int BevelClamp_RangeID = Shader.PropertyToID("_BevelClamp");
		public const string BevelRoundness_Range = "_BevelRoundness";
		public static readonly int BevelRoundness_RangeID = Shader.PropertyToID("_BevelRoundness");
		public const string LightAngle_Range = "_LightAngle";
		public static readonly int LightAngle_RangeID = Shader.PropertyToID("_LightAngle");
		public const string SpecularColor_Color = "_SpecularColor";
		public static readonly int SpecularColor_ColorID = Shader.PropertyToID("_SpecularColor");
		public const string SpecularPower_Range = "_SpecularPower";
		public static readonly int SpecularPower_RangeID = Shader.PropertyToID("_SpecularPower");
		public const string Reflectivity_Range = "_Reflectivity";
		public static readonly int Reflectivity_RangeID = Shader.PropertyToID("_Reflectivity");
		public const string Diffuse_Range = "_Diffuse";
		public static readonly int Diffuse_RangeID = Shader.PropertyToID("_Diffuse");
		public const string Ambient_Range = "_Ambient";
		public static readonly int Ambient_RangeID = Shader.PropertyToID("_Ambient");
		public const string BumpMap_Texture = "_BumpMap";
		public static readonly int BumpMap_TextureID = Shader.PropertyToID("_BumpMap");
		public const string BumpOutline_Range = "_BumpOutline";
		public static readonly int BumpOutline_RangeID = Shader.PropertyToID("_BumpOutline");
		public const string BumpFace_Range = "_BumpFace";
		public static readonly int BumpFace_RangeID = Shader.PropertyToID("_BumpFace");
		public const string ReflectFaceColor_Color = "_ReflectFaceColor";
		public static readonly int ReflectFaceColor_ColorID = Shader.PropertyToID("_ReflectFaceColor");
		public const string ReflectOutlineColor_Color = "_ReflectOutlineColor";
		public static readonly int ReflectOutlineColor_ColorID = Shader.PropertyToID("_ReflectOutlineColor");
		public const string Cube_Texture = "_Cube";
		public static readonly int Cube_TextureID = Shader.PropertyToID("_Cube");
		public const string EnvMatrixRotation_Vector = "_EnvMatrixRotation";
		public static readonly int EnvMatrixRotation_VectorID = Shader.PropertyToID("_EnvMatrixRotation");
		public const string UnderlayColor_Color = "_UnderlayColor";
		public static readonly int UnderlayColor_ColorID = Shader.PropertyToID("_UnderlayColor");
		public const string UnderlayOffsetX_Range = "_UnderlayOffsetX";
		public static readonly int UnderlayOffsetX_RangeID = Shader.PropertyToID("_UnderlayOffsetX");
		public const string UnderlayOffsetY_Range = "_UnderlayOffsetY";
		public static readonly int UnderlayOffsetY_RangeID = Shader.PropertyToID("_UnderlayOffsetY");
		public const string UnderlayDilate_Range = "_UnderlayDilate";
		public static readonly int UnderlayDilate_RangeID = Shader.PropertyToID("_UnderlayDilate");
		public const string UnderlaySoftness_Range = "_UnderlaySoftness";
		public static readonly int UnderlaySoftness_RangeID = Shader.PropertyToID("_UnderlaySoftness");
		public const string GlowColor_Color = "_GlowColor";
		public static readonly int GlowColor_ColorID = Shader.PropertyToID("_GlowColor");
		public const string GlowOffset_Range = "_GlowOffset";
		public static readonly int GlowOffset_RangeID = Shader.PropertyToID("_GlowOffset");
		public const string GlowInner_Range = "_GlowInner";
		public static readonly int GlowInner_RangeID = Shader.PropertyToID("_GlowInner");
		public const string GlowOuter_Range = "_GlowOuter";
		public static readonly int GlowOuter_RangeID = Shader.PropertyToID("_GlowOuter");
		public const string GlowPower_Range = "_GlowPower";
		public static readonly int GlowPower_RangeID = Shader.PropertyToID("_GlowPower");
		public const string WeightNormal_Float = "_WeightNormal";
		public static readonly int WeightNormal_FloatID = Shader.PropertyToID("_WeightNormal");
		public const string WeightBold_Float = "_WeightBold";
		public static readonly int WeightBold_FloatID = Shader.PropertyToID("_WeightBold");
		public const string ShaderFlags_Float = "_ShaderFlags";
		public static readonly int ShaderFlags_FloatID = Shader.PropertyToID("_ShaderFlags");
		public const string ScaleRatioA_Float = "_ScaleRatioA";
		public static readonly int ScaleRatioA_FloatID = Shader.PropertyToID("_ScaleRatioA");
		public const string ScaleRatioB_Float = "_ScaleRatioB";
		public static readonly int ScaleRatioB_FloatID = Shader.PropertyToID("_ScaleRatioB");
		public const string ScaleRatioC_Float = "_ScaleRatioC";
		public static readonly int ScaleRatioC_FloatID = Shader.PropertyToID("_ScaleRatioC");
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string TextureWidth_Float = "_TextureWidth";
		public static readonly int TextureWidth_FloatID = Shader.PropertyToID("_TextureWidth");
		public const string TextureHeight_Float = "_TextureHeight";
		public static readonly int TextureHeight_FloatID = Shader.PropertyToID("_TextureHeight");
		public const string GradientScale_Float = "_GradientScale";
		public static readonly int GradientScale_FloatID = Shader.PropertyToID("_GradientScale");
		public const string ScaleX_Float = "_ScaleX";
		public static readonly int ScaleX_FloatID = Shader.PropertyToID("_ScaleX");
		public const string ScaleY_Float = "_ScaleY";
		public static readonly int ScaleY_FloatID = Shader.PropertyToID("_ScaleY");
		public const string PerspectiveFilter_Range = "_PerspectiveFilter";
		public static readonly int PerspectiveFilter_RangeID = Shader.PropertyToID("_PerspectiveFilter");
		public const string Sharpness_Range = "_Sharpness";
		public static readonly int Sharpness_RangeID = Shader.PropertyToID("_Sharpness");
		public const string VertexOffsetX_Float = "_VertexOffsetX";
		public static readonly int VertexOffsetX_FloatID = Shader.PropertyToID("_VertexOffsetX");
		public const string VertexOffsetY_Float = "_VertexOffsetY";
		public static readonly int VertexOffsetY_FloatID = Shader.PropertyToID("_VertexOffsetY");
		public const string MaskCoord_Vector = "_MaskCoord";
		public static readonly int MaskCoord_VectorID = Shader.PropertyToID("_MaskCoord");
		public const string ClipRect_Vector = "_ClipRect";
		public static readonly int ClipRect_VectorID = Shader.PropertyToID("_ClipRect");
		public const string MaskSoftnessX_Float = "_MaskSoftnessX";
		public static readonly int MaskSoftnessX_FloatID = Shader.PropertyToID("_MaskSoftnessX");
		public const string MaskSoftnessY_Float = "_MaskSoftnessY";
		public static readonly int MaskSoftnessY_FloatID = Shader.PropertyToID("_MaskSoftnessY");
		public const string StencilComp_Float = "_StencilComp";
		public static readonly int StencilComp_FloatID = Shader.PropertyToID("_StencilComp");
		public const string Stencil_Float = "_Stencil";
		public static readonly int Stencil_FloatID = Shader.PropertyToID("_Stencil");
		public const string StencilOp_Float = "_StencilOp";
		public static readonly int StencilOp_FloatID = Shader.PropertyToID("_StencilOp");
		public const string StencilWriteMask_Float = "_StencilWriteMask";
		public static readonly int StencilWriteMask_FloatID = Shader.PropertyToID("_StencilWriteMask");
		public const string StencilReadMask_Float = "_StencilReadMask";
		public static readonly int StencilReadMask_FloatID = Shader.PropertyToID("_StencilReadMask");
		public const string CullMode_Float = "_CullMode";
		public static readonly int CullMode_FloatID = Shader.PropertyToID("_CullMode");
		public const string ColorMask_Float = "_ColorMask";
		public static readonly int ColorMask_FloatID = Shader.PropertyToID("_ColorMask");
		
	} // class TextMeshPro_DistanceField
	
	public static class TextMeshPro_Sprite
	{
		// Members
		public const string MainTex_Texture = "_MainTex";
		public static readonly int MainTex_TextureID = Shader.PropertyToID("_MainTex");
		public const string Color_Color = "_Color";
		public static readonly int Color_ColorID = Shader.PropertyToID("_Color");
		public const string StencilComp_Float = "_StencilComp";
		public static readonly int StencilComp_FloatID = Shader.PropertyToID("_StencilComp");
		public const string Stencil_Float = "_Stencil";
		public static readonly int Stencil_FloatID = Shader.PropertyToID("_Stencil");
		public const string StencilOp_Float = "_StencilOp";
		public static readonly int StencilOp_FloatID = Shader.PropertyToID("_StencilOp");
		public const string StencilWriteMask_Float = "_StencilWriteMask";
		public static readonly int StencilWriteMask_FloatID = Shader.PropertyToID("_StencilWriteMask");
		public const string StencilReadMask_Float = "_StencilReadMask";
		public static readonly int StencilReadMask_FloatID = Shader.PropertyToID("_StencilReadMask");
		public const string CullMode_Float = "_CullMode";
		public static readonly int CullMode_FloatID = Shader.PropertyToID("_CullMode");
		public const string ColorMask_Float = "_ColorMask";
		public static readonly int ColorMask_FloatID = Shader.PropertyToID("_ColorMask");
		public const string ClipRect_Vector = "_ClipRect";
		public static readonly int ClipRect_VectorID = Shader.PropertyToID("_ClipRect");
		public const string UseUIAlphaClip_Float = "_UseUIAlphaClip";
		public static readonly int UseUIAlphaClip_FloatID = Shader.PropertyToID("_UseUIAlphaClip");
		
	} // class TextMeshPro_Sprite
	
	
} // class ShaderConstants
